package com.trenning.learnlanguagebot.bot;

import com.trenning.learnlanguagebot.constants.LanguageConstants;
import com.trenning.learnlanguagebot.entity.User;
import com.trenning.learnlanguagebot.entity.UserState;
import com.trenning.learnlanguagebot.entity.Word;
import com.trenning.learnlanguagebot.service.*;
import lombok.SneakyThrows;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Optional;

public class TelegramBot extends TelegramLongPollingBot {

    private final MessageService messageService;
    private final StateService stateService;
    private final UserService userService;
    private final WordService wordService;

    public TelegramBot(DefaultBotOptions options,
                       String botToken,
                       MessageService messageService,
                       StateService stateService,
                       UserService userService,
                       WordService wordService) {
        super(options, botToken);
        this.messageService = messageService;
        this.stateService = stateService;
        this.userService = userService;
        this.wordService = wordService;
    }

    @Override
    @SneakyThrows
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleTextMessage(update);
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update);
        }
    }

    private void handleTextMessage(Update update) throws TelegramApiException {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();

        SendMessage response = switch (text) {
            case "/start" -> handleStartCommand(chatId, update);
            case "üë§ –ü—Ä–æ—Ñ–∏–ª—å" -> handleInfoCommand(chatId);
            case "‚ùì –ü–æ–º–æ—â—å" ->handleHelpCommand(chatId);
            case "üìö –£—á–∏—Ç—å —è–∑—ã–∫" -> messageService.createMenuToStartLearn(chatId);
            case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ" -> handleAddWordCommand(chatId);
            case "üîô –ù–∞–∑–∞–¥" -> handleBackCommand(chatId);
            case "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ª–æ–≤–∞" -> handleShowWordsCommand(chatId);
            case "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" -> handleNextWordCommand(chatId);
            case "‚ùå –£–¥–∞–ª–∏—Ç—å" -> handleDeleteWordCommand(chatId);
            case "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" -> handleChangeLanguageCommand(chatId);
            case "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> handleMainMenu(chatId);
            default -> handleDefaultCommand(chatId, text);
        };

        if (response != null) {
            execute(response);
        }
    }

    private SendMessage handleHelpCommand(Long chatId) {
        String helpMessage = """
            üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é LanguageBot* üÜò

            –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:

            üìö *–£—á–∏—Ç—å —è–∑—ã–∫* ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ:
               - –î–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ –≤—Ä—É—á–Ω—É—é.
               - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞.
               - –û—Ç–º–µ—á–∞—Ç—å —Å–ª–æ–≤–∞ –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω—ã–µ.

            üë§ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:
               - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
               - –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–Ω–æ–≤–∏—á–æ–∫, —É—á–µ–Ω–∏–∫, —ç–∫—Å–ø–µ—Ä—Ç –∏ —Ç.–¥.).

            üåç *–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å.

            ‚ùå *–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ* ‚Äî —É–¥–∞–ª–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.

            ‚û°Ô∏è *–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ* ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É.

            üîô *–ù–∞–∑–∞–¥* ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é.

            üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

            –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ: @BodyaPryadko .
            """;

        SendMessage message = new SendMessage(chatId.toString(), helpMessage);
        message.setParseMode("Markdown");
        return message;
    }

    private SendMessage handleStartCommand(Long chatId, Update update) {
        var name = update.getMessage().getFrom().getUserName();
        var userFromDb = userService.findByChatId(chatId);

        if (userFromDb == null) {
            User user = new User();
            user.setName(name);
            user.setChatId(chatId);
            user.setUserState(UserState.DEFAULT);
            user.setRating(0);
            userService.save(user);
        }
        return messageService.createMainMenu(chatId);
    }



    private SendMessage handleInfoCommand(Long chatId) {
        User user = userService.findByChatId(chatId);
        return messageService.createUserInfoMessage(chatId, user);
    }

    private SendMessage handleBackCommand(Long chatId) {
        stateService.resetUserState(chatId);
        return messageService.createMenuToStartLearn(chatId);
    }

    private SendMessage handleNextWordCommand(Long chatId) {
        User user = userService.findByChatId(chatId);
        List<Word> words = wordService.getUserWords(user);

        if (words.isEmpty()) {
            return messageService.createSimpleMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.");
        }

        int nextIndex = (user.getCurrentWordIndex() + 1) % words.size();
        user.setCurrentWordIndex(nextIndex);
        userService.save(user);

        Word nextWord = words.get(nextIndex);
        return messageService.createWordInfoMessage(chatId, nextWord);
    }

    private SendMessage handleDeleteWordCommand(Long chatId) {
        User user = userService.findByChatId(chatId);
        List<Word> words = wordService.getUserWords(user);

        if (words.isEmpty()) {
            return messageService.createSimpleMessage(chatId, "üì≠ –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }

        int currentIndex = user.getCurrentWordIndex() % words.size();
        Word wordToDelete = words.get(currentIndex);
        wordService.deleteWordForUser(wordToDelete, user);

        return handleNextWordCommand(chatId);
    }

    private SendMessage handleDefaultCommand(Long chatId, String text) {
        if (stateService.getUserState(chatId) == UserState.WAITING_FOR_WORD) {
            stateService.resetUserState(chatId);
            Optional<Word> word = wordService.searchAndSaveWord(text, userService.findByChatId(chatId));
            return word.map(value -> messageService.createWordInfoMessageWhenAddNew(chatId, value))
                    .orElseGet(() -> messageService.createSimpleMessage(chatId, "‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."));
        }
        return messageService.createSimpleMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
    }

    private SendMessage handleChangeLanguageCommand(Long chatId) {
        User user = userService.findByChatId(chatId);
        return messageService.createLanguageMenu(chatId, user.getCurrentLanguage());
    }

    private SendMessage handleAddWordCommand(Long chatId) {
        User user = userService.findByChatId(chatId);

        if (user == null) {
            return messageService.createSimpleMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.");
        }

        if (user.getCurrentLanguage() == null) {
            return messageService.createSimpleMessage(chatId, "üåç –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.");
        }

        stateService.setUserState(chatId, UserState.WAITING_FOR_WORD);
        return messageService.createSimpleMessage(chatId, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–¥.");
    }

    private SendMessage handleShowWordsCommand(Long chatId) throws TelegramApiException {
        User user = userService.findByChatId(chatId);

        if (user.getCurrentLanguage() == null) {
            return messageService.createSimpleMessage(chatId, "üåç –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.");
        }

        List<Word> words = wordService.getUserWords(user);

        if (words.isEmpty()) {
            return messageService.createSimpleMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.");
        }

        Word word = words.get(0);
        return messageService.createWordInfoMessage(chatId, word);
    }

    private void handleCallbackQuery(Update update) throws TelegramApiException {
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long chatId = update.getCallbackQuery().getMessage().getChatId();

            CallbackQuery callbackQuery = update.getCallbackQuery();
            String callbackQueryId = callbackQuery.getId();
            AnswerCallbackQuery answerCallbackQuery = new AnswerCallbackQuery();
            answerCallbackQuery.setCallbackQueryId(callbackQueryId);
            execute(answerCallbackQuery);

            if (callbackData.startsWith("language_")) {
                String selectedLanguageCode = callbackData.split("_")[1];
                SendMessage response = handleLanguageSelection(chatId, selectedLanguageCode);
                if (response != null) {
                    execute(response);
                }
            } else if (callbackData.startsWith("learned_")) {
                Long wordId = Long.parseLong(callbackData.split("_")[1]);
                SendMessage response = handleLearnedWord(chatId, wordId);
                if (response != null) {
                    execute(response);
                }
            }
        }
    }

    private SendMessage handleLearnedWord(Long chatId, Long wordId) throws TelegramApiException {
        User user = userService.findByChatId(chatId);
        Word word = wordService.findById(wordId).orElse(null);

        if (word != null && user != null) {

            user.setRating(user.getRating()+1);
            userService.save(user);

            wordService.deleteWordForUser(word, user);

            SendMessage confirmationMessage = messageService.createSimpleMessage(chatId, "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤—ã—É—á–µ–Ω–Ω—ã–µ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å \uD83D\uDE18");
            execute(confirmationMessage);

            return handleNextWordCommand(chatId);
        }

        return messageService.createSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞.");
    }


    private SendMessage handleLanguageSelection(Long chatId, String languageCode) {
        User user = userService.findByChatId(chatId);

        if (user != null) {
            user.setCurrentLanguage(languageCode);
            userService.save(user);
            return messageService.createSimpleMessage(chatId, "‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: " + LanguageConstants.LANGUAGES.get(languageCode));
        }

        return messageService.createSimpleMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    private SendMessage handleMainMenu(Long chatId) {
        stateService.resetUserState(chatId);
        return messageService.createMainMenu(chatId);
    }

    @Override
    public String getBotUsername() {
        return "LanguageBot";
    }
}