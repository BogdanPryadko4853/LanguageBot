package com.trenning.learnlanguagebot.service;

import com.trenning.learnlanguagebot.constants.LanguageConstants;
import com.trenning.learnlanguagebot.entity.User;
import com.trenning.learnlanguagebot.entity.Word;
import com.trenning.learnlanguagebot.formatter.MessageFormatter;
import com.trenning.learnlanguagebot.keyboard.KeyboardFactory;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;


@Service
@RequiredArgsConstructor
public class MessageService {
    private final KeyboardFactory keyboardFactory;


    public SendMessage createMainMenu(Long chatId) {

        String text = MessageFormatter.formatMessage("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        String welcomeMessage = """
            üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LanguageBot!* üéâ

            –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —É–ª—É—á—à–∞—Ç—å –≤–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:

            üìö *–£—á–∏—Ç—å —è–∑—ã–∫* ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.
            üë§ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å.
            üåç *–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
            ‚ùì *–ü–æ–º–æ—â—å* ‚Äî —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.

            –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É—á–∏—Ç–µ üåç
            """;
        SendMessage message = new SendMessage(chatId.toString(), welcomeMessage);


        message.setReplyMarkup(keyboardFactory.createKeyboard(
                "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
                "‚ùì –ü–æ–º–æ—â—å",
                "üìö –£—á–∏—Ç—å —è–∑—ã–∫",
                "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
        ));
        message.setParseMode("HTML");
        return message;
    }

    public SendMessage createMenuToStartLearn(Long chatId) {
        String text = MessageFormatter.formatMessage("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(keyboardFactory.createKeyboard(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
                "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ª–æ–≤–∞",
                "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ",
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ));
        message.setParseMode("HTML");
        return message;
    }

    public SendMessage createUserInfoMessage(Long chatId, User user) {
        SendMessage sendMessage;
        if (user != null) {
            int rating = user.getRating();

            String status;
            String emoji;
            if (rating == 0) {
                status = "–ù–æ–≤–∏—á–æ–∫";
                emoji = "üë∂";
            } else if (rating < 150) {
                status = "–£—á–µ–Ω–∏–∫";
                emoji = "üßë‚Äçüéì";
            } else if (rating < 300) {
                status = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π";
                emoji = "üéì";
            } else if(rating<1000) {
                status = "–≠–∫—Å–ø–µ—Ä—Ç";
                emoji = "üèÜ";
            } else {
                status = "–ß–µ–º–ø–∏–æ–Ω";
                emoji = "\uD83D\uDCC8";
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            String text = MessageFormatter.formatMessage(
                    "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" +
                            "ID: " + user.getId() + "\n" +
                            "–ò–º—è: " + user.getName() + "\n" +
                            "–†–µ–π—Ç–∏–Ω–≥: " + rating + "\n" +
                            "–°—Ç–∞—Ç—É—Å: " + status + " " + emoji
            );

            sendMessage = new SendMessage(chatId.toString(), text);
            sendMessage.setParseMode("HTML");
        } else {
            sendMessage = new SendMessage(chatId.toString(), MessageFormatter.formatErrorMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));
            sendMessage.setParseMode("HTML");
        }
        return sendMessage;
    }
    public SendMessage createWordInfoMessage(Long chatId, Word word) {
        SendMessage sendMessage;
        if (word != null) {
            String response = MessageFormatter.formatWordInfo(word);

            // Inline-–∫–Ω–æ–ø–∫–∞ "–í—ã—É—á–∏–ª"
            InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> inlineRows = new ArrayList<>();

            InlineKeyboardButton learnedButton = new InlineKeyboardButton();
            learnedButton.setText("‚úÖ –í—ã—É—á–∏–ª");
            learnedButton.setCallbackData("learned_" + word.getId());

            List<InlineKeyboardButton> inlineRow = new ArrayList<>();
            inlineRow.add(learnedButton);
            inlineRows.add(inlineRow);

            inlineKeyboardMarkup.setKeyboard(inlineRows);

            ReplyKeyboardMarkup replyKeyboardMarkup = keyboardFactory.createKeyboard(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å",
                    "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ",
                    "üîô –ù–∞–∑–∞–¥",
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            );


            sendMessage = new SendMessage(chatId.toString(), response);
            sendMessage.setReplyMarkup(replyKeyboardMarkup);
            sendMessage.setReplyMarkup(inlineKeyboardMarkup);
            sendMessage.setParseMode("HTML");

        } else {
            sendMessage = new SendMessage(chatId.toString(), MessageFormatter.formatErrorMessage("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."));
            sendMessage.setParseMode("HTML");
        }
        return sendMessage;
    }

    public SendMessage createWordInfoMessageWhenAddNew(Long chatId, Word word) {
        SendMessage sendMessage;
        if (word != null) {
            String response = MessageFormatter.formatWordInfo(word) + MessageFormatter.formatWordAddedSuccessfully();
            ReplyKeyboardMarkup keyboard = keyboardFactory.createKeyboard(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
                    "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ª–æ–≤–∞",
                    "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ",
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            );
            SendMessage message = new SendMessage(chatId.toString(), response);
            message.setReplyMarkup(keyboard);
            message.setParseMode("HTML");
            return message;
        } else {
            sendMessage = new SendMessage(chatId.toString(), MessageFormatter.formatErrorMessage("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."));
            sendMessage.setParseMode("HTML");
            return sendMessage;
        }
    }


    public SendMessage createSimpleMessage(Long chatId, String text) {
        String formattedText = MessageFormatter.formatMessage(text);
        SendMessage sendMessage = new SendMessage(chatId.toString(), formattedText);
        sendMessage.setParseMode("HTML");
        return sendMessage;
    }

    public SendMessage createLanguageMenu(Long chatId, String currentLanguage) {
        String text = MessageFormatter.formatMessage("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:");
        SendMessage message = new SendMessage(chatId.toString(), text);
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Map.Entry<String, String> entry : LanguageConstants.LANGUAGES.entrySet()) {
            String languageCode = entry.getKey();
            String languageName = entry.getValue();

            String buttonText = "üåê " + languageName;

            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(buttonText);
            button.setCallbackData("language_" + languageCode);

            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button);
            rows.add(row);
        }

        keyboardMarkup.setKeyboard(rows);
        message.setReplyMarkup(keyboardMarkup);
        message.setParseMode("HTML");
        return message;
    }
}