package com.trenning.learnlanguagebot.service;

import com.trenning.learnlanguagebot.constants.LanguageConstants;
import com.trenning.learnlanguagebot.entity.User;
import com.trenning.learnlanguagebot.entity.Word;
import com.trenning.learnlanguagebot.keyboard.KeyboardFactory;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class MessageService {
    private final KeyboardFactory keyboardFactory;

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    private static final String WELCOME_MESSAGE = """
            üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LanguageBot!* üéâ

            –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —É–ª—É—á—à–∞—Ç—å –≤–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:

            üìö *–£—á–∏—Ç—å —è–∑—ã–∫* ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.
            üë§ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å.
            üåç *–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
            ‚ùì *–ü–æ–º–æ—â—å* ‚Äî —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.

            –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É—á–∏—Ç–µ üåç
            """;

    private static final String LEARN_MENU_MESSAGE = "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ \uD83D\uDCCC";
    private static final String PROFILE_MESSAGE_TEMPLATE = """
            –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
            ID: %d
            –ò–º—è: %s
            –†–µ–π—Ç–∏–Ω–≥: %d
            –°—Ç–∞—Ç—É—Å: %s %s
            """;
    private static final String WORD_INFO_TEMPLATE = "–°–ª–æ–≤–æ: %s\n–ü–µ—Ä–µ–≤–æ–¥: %s\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: %s";
    private static final String WORD_ADDED_MESSAGE = "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤—ã—É—á–µ–Ω–Ω—ã–µ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å \uD83D\uDE18";
    private static final String LANGUAGE_MENU_MESSAGE = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: \uD83C\uDF0F";

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

    public SendMessage createMainMenu(Long chatId) {
        SendMessage message = new SendMessage(chatId.toString(), WELCOME_MESSAGE);
        message.setReplyMarkup(createMainMenuKeyboard());
        message.setParseMode("Markdown");
        return message;
    }

    public SendMessage createMenuToStartLearn(Long chatId) {
        SendMessage message = new SendMessage(chatId.toString(), LEARN_MENU_MESSAGE);
        message.setReplyMarkup(createLearnMenuKeyboard());
        message.setParseMode("HTML");
        return message;
    }
    public SendMessage createWordInfoMessageWithPagination(Long chatId, Word word, int currentIndex, int totalWords) {
        if (word == null) {
            return createSimpleMessage(chatId, "‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }

        String response = String.format(WORD_INFO_TEMPLATE, word.getWord(), word.getTranslation(), word.getTranscription());
        SendMessage message = new SendMessage(chatId.toString(), response);
        message.setReplyMarkup(createWordInfoKeyboardWithPagination(word.getId(), currentIndex, totalWords));
        message.setParseMode("HTML");
        return message;
    }


    private InlineKeyboardMarkup createWordInfoKeyboardWithPagination(Long wordId, int currentIndex, int totalWords) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> inlineRows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–í—ã—É—á–∏–ª"
        InlineKeyboardButton learnedButton = new InlineKeyboardButton();
        learnedButton.setText("‚úÖ –í—ã—É—á–∏–ª");
        learnedButton.setCallbackData("learned_" + wordId);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton previousButton = new InlineKeyboardButton();
        previousButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        previousButton.setCallbackData("previous_word");

        // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        InlineKeyboardButton nextButton = new InlineKeyboardButton();
        nextButton.setText("‚û°Ô∏è –í–ø–µ—Ä–µ–¥");
        nextButton.setCallbackData("next_word");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏
        List<InlineKeyboardButton> firstRow = new ArrayList<>();
        firstRow.add(learnedButton);

        List<InlineKeyboardButton> secondRow = new ArrayList<>();
        secondRow.add(previousButton);
        secondRow.add(nextButton);

        inlineRows.add(firstRow);
        inlineRows.add(secondRow);

        inlineKeyboardMarkup.setKeyboard(inlineRows);
        return inlineKeyboardMarkup;
    }

    public SendMessage createUserInfoMessage(Long chatId, User user) {
        if (user == null) {
            return createSimpleMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        String status = determineUserStatus(user.getRating());
        String emoji = determineStatusEmoji(user.getRating());

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ç–µ–≥–æ–≤
        String text = String.format(
                "‚ú® <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b> ‚ú®\n\n" +
                        "üÜî <b>ID:</b> %d\n" +
                        "üë§ <b>–ò–º—è:</b> %s\n" +
                        "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> %d\n" +
                        "üèÖ <b>–°—Ç–∞—Ç—É—Å:</b> %s %s\n\n" +
                        "üìö <b>–í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤:</b> %d",
                user.getId(),
                user.getName(),
                user.getRating(),
                status,
                emoji,
                user.getRating()
        );

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("HTML");
        return message;
    }

    public SendMessage createWordInfoMessage(Long chatId, Word word) {
        if (word == null) {
            return createSimpleMessage(chatId, "‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }

        String response = String.format(WORD_INFO_TEMPLATE, word.getWord(), word.getTranslation(), word.getTranscription());
        SendMessage message = new SendMessage(chatId.toString(), response);
        message.setReplyMarkup(createWordInfoKeyboard(word.getId()));
        message.setParseMode("HTML");
        return message;
    }

    public SendMessage createWordInfoMessageWhenAddNew(Long chatId, Word word) {
        if (word == null) {
            return createSimpleMessage(chatId, "‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        String response = String.format(
                "‚ú® <b>–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> ‚ú®\n\n" +
                        "üìñ <b>–°–ª–æ–≤–æ:</b> %s\n" +
                        "üåç <b>–ü–µ—Ä–µ–≤–æ–¥:</b> %s\n" +
                        "üîä <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b> %s",
                word.getWord(), word.getTranslation(), word.getTranscription()
        );

        SendMessage message = new SendMessage(chatId.toString(), response);
        message.setReplyMarkup(createLearnMenuKeyboard());
        message.setParseMode("HTML");
        return message;
    }

    public SendMessage createSimpleMessage(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("HTML");
        return message;
    }

    public SendMessage createLanguageMenu(Long chatId, String currentLanguage) {
        SendMessage message = new SendMessage(chatId.toString(), LANGUAGE_MENU_MESSAGE);
        message.setReplyMarkup(createLanguageMenuKeyboard(currentLanguage));
        message.setParseMode("HTML");
        return message;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private ReplyKeyboardMarkup createMainMenuKeyboard() {
        return keyboardFactory.createKeyboard(
                "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
                "‚ùì –ü–æ–º–æ—â—å",
                "üìö –£—á–∏—Ç—å —è–∑—ã–∫",
                "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
        );
    }

    private ReplyKeyboardMarkup createLearnMenuKeyboard() {
        return keyboardFactory.createKeyboard(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
                "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ª–æ–≤–∞",
                "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ",
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        );
    }

    private InlineKeyboardMarkup createWordInfoKeyboard(Long wordId) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> inlineRows = new ArrayList<>();

        InlineKeyboardButton learnedButton = new InlineKeyboardButton();
        learnedButton.setText("‚úÖ –í—ã—É—á–∏–ª");
        learnedButton.setCallbackData("learned_" + wordId);

        List<InlineKeyboardButton> inlineRow = new ArrayList<>();
        inlineRow.add(learnedButton);
        inlineRows.add(inlineRow);

        inlineKeyboardMarkup.setKeyboard(inlineRows);
        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup createLanguageMenuKeyboard(String currentLanguage) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Map.Entry<String, String> entry : LanguageConstants.LANGUAGES.entrySet()) {
            String languageCode = entry.getKey();
            String languageName = entry.getValue();

            String buttonText = "üåê " + languageName;
            if (languageCode.equals(currentLanguage)) {
                buttonText += " ‚úÖ";
            }

            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(buttonText);
            button.setCallbackData("language_" + languageCode);

            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button);
            rows.add(row);
        }

        keyboardMarkup.setKeyboard(rows);
        return keyboardMarkup;
    }

    private String determineUserStatus(int rating) {
        if (rating == 0) {
            return "–ù–æ–≤–∏—á–æ–∫";
        } else if (rating < 150) {
            return "–£—á–µ–Ω–∏–∫";
        } else if (rating < 300) {
            return "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π";
        } else if (rating < 1000) {
            return "–≠–∫—Å–ø–µ—Ä—Ç";
        } else {
            return "–ß–µ–º–ø–∏–æ–Ω";
        }
    }

    private String determineStatusEmoji(int rating) {
        if (rating == 0) {
            return "üë∂";
        } else if (rating < 150) {
            return "üßë‚Äçüéì";
        } else if (rating < 300) {
            return "üéì";
        } else if (rating < 1000) {
            return "üèÜ";
        } else {
            return "\uD83D\uDCC8";
        }
    }
}